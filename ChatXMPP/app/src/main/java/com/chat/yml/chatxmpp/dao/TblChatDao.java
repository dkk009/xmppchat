package com.chat.yml.chatxmpp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.chat.yml.chatxmpp.dao.TblChat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TBL_CHAT.
*/
public class TblChatDao extends AbstractDao<TblChat, Long> {

    public static final String TABLENAME = "TBL_CHAT";

    /**
     * Properties of entity TblChat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Jid = new Property(1, String.class, "jid", false, "JID");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property IsMine = new Property(5, Boolean.class, "isMine", false, "IS_MINE");
    };


    public TblChatDao(DaoConfig config) {
        super(config);
    }
    
    public TblChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TBL_CHAT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'JID' TEXT," + // 1: jid
                "'MESSAGE' TEXT," + // 2: message
                "'DATE' TEXT," + // 3: date
                "'TIME' TEXT," + // 4: time
                "'IS_MINE' INTEGER);"); // 5: isMine
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TBL_CHAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TblChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jid = entity.getJid();
        if (jid != null) {
            stmt.bindString(2, jid);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        Boolean isMine = entity.getIsMine();
        if (isMine != null) {
            stmt.bindLong(6, isMine ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TblChat readEntity(Cursor cursor, int offset) {
        TblChat entity = new TblChat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isMine
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TblChat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsMine(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TblChat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TblChat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
